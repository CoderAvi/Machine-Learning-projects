CODE FOR ADDING A NEW FACE

import cv2
import numpy as np
import os
import pickle
face_data = []
i = 0
cam = cv2.VideoCapture(0)
facec = cv2.CascadeClassifier('data/haarcascade_frontalface_default.xml')
name = input('Enter your name --> ')
ret = True
# Face Recognition using KNN
while(ret):
    ret, frame = cam.read()
    if ret == True:
        gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
        face_coordinates = facec.detectMultiScale(gray, 1.3, 4)
        for (x, y, w, h) in face_coordinates:
            faces = frame[y:y+h, x:x+w, :]
            resized_faces = cv2.resize(faces, (50, 50))
            if i % 10 == 0 and len(face_data) < 10:
                face_data.append(resized_faces)
            cv2.rectangle(frame, (x, y), (x+w, y+h), (255, 0, 0), 2)
        i += 1
        cv2.imshow('frames', frame)
        if cv2.waitKey(1) == 27 or len(face_data) >= 10:
            break
    else:
        print('error')
        break
cv2.destroyAllWindows()
cam.release()
face_data = np.asarray(face_data)
face_data = face_data.reshape(10, -1)
if 'names.pkl' not in os.listdir('data/'):
    names = [name]*10
    with open('data/names.pkl', 'wb') as f:
        pickle.dump(names, f)
else:
    with open('data/names.pkl', 'rb') as f:
        names = pickle.load(f)
    names = names + [name]*10
    with open('data/names.pkl', 'wb') as f:
        pickle.dump(names, f)
if 'faces.pkl' not in os.listdir('data/'):
    with open('data/faces.pkl', 'wb') as w:
        pickle.dump(face_data, w)
else:
    with open('data/faces.pkl', 'rb') as w:
        faces = pickle.load(w)
    faces = np.append(faces, face_data, axis=0)
    with open('data/faces.pkl', 'wb') as w:
        pickle.dump(faces, w)


CODE FOR LIVETIME FACE RECOGNITION USING KNN



import cv2
import numpy as np
import pickle
from sklearn.neighbors import KNeighborsClassifier
with open('data/faces.pkl', 'rb') as w:
    faces = pickle.load(w)
with open('data/names.pkl', 'rb') as f:
    labels = pickle.load(f)
facec = cv2.CascadeClassifier('data/haarcascade_frontalface_default.xml')
cam = cv2.VideoCapture(0)
print('Shape of Faces matrix --> ', faces.shape)
knn = KNeighborsClassifier(n_neighbors=5)
knn.fit(faces,labels)
# Face Recognition using KNN
while True:
    ret, fr = cam.read()
    if ret == True:
        gray = cv2.cvtColor(fr, cv2.COLOR_BGR2GRAY)
        face_coordinates = facec.detectMultiScale(gray, 1.3, 5)
        for (x, y, w, h) in face_coordinates:
            fc = fr[y:y + h, x:x + w, :]
            r = cv2.resize(fc, (50, 50)).flatten().reshape(1,-1)
            text = knn.predict(r)
            cv2.putText(fr, text[0], (x, y-10), cv2.FONT_HERSHEY_SIMPLEX, 1, (255, 255, 0), 2)
            cv2.rectangle(fr, (x, y), (x + w, y + w), (0, 0, 255), 2)
        cv2.imshow('livetime face recognition', fr)
        if cv2.waitKey(1) == 27:
            break
    else:
        print("error")
        break
cv2.destroyAllWindows()
